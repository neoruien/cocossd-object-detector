{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","webcamRef","useRef","canvasRef","useEffect","a","cocossd","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","obj","ctx","getContext","drawBbox","detections","forEach","prediction","x","y","text","color","Math","floor","random","toString","strokeStyle","font","beginPath","rect","stroke","fillStyle","fillText","className","style","position","top","fontSize","ref","muted","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6cAiFeA,MA3Ef,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAEzBE,oBAAS,sBAAC,4BAAAC,EAAA,sEACUC,SADV,OACFC,EADE,OAERC,aAAY,WAAOC,EAAOF,KAAO,IAFzB,4CAKV,IAAME,EAAM,uCAAG,WAAOF,GAAP,uBAAAF,EAAA,yDAGW,OAAtBJ,EAAUS,SAC6B,IAAvCT,EAAUS,QAAQC,MAAMC,WAJb,wBAOLD,EAAQV,EAAUS,QAAQC,MAC1BE,EAAaZ,EAAUS,QAAQC,MAAME,WACrCC,EAAcb,EAAUS,QAAQC,MAAMG,YAC5Cb,EAAUS,QAAQC,MAAMI,MAAQF,EAChCZ,EAAUS,QAAQC,MAAMK,OAASF,EACjCX,EAAUO,QAAQK,MAAQF,EAC1BV,EAAUO,QAAQM,OAASF,EAbhB,UAeOP,EAAIE,OAAOE,GAflB,QAeLM,EAfK,OAiBLC,EAAMf,EAAUO,QAAQS,WAAW,MACzCC,EAASH,EAAKC,GAlBH,4CAAH,sDAsBNE,EAAW,SAACC,EAAYH,GAC5BG,EAAWC,SAAQ,SAAAC,GAAc,kBAEDA,EAAU,KAFT,GAExBC,EAFwB,KAErBC,EAFqB,KAElBV,EAFkB,KAEXC,EAFW,KAGzBU,EAAOH,EAAU,MAEjBI,EAAQC,KAAKC,MAAoB,KAAdD,KAAKE,UAAmBC,SAAS,IAC1Db,EAAIc,YAAc,IAAML,EACxBT,EAAIe,KAAO,cAEXf,EAAIgB,YACJhB,EAAIiB,KAAKX,EAAGC,EAAGV,EAAOC,GACtBE,EAAIkB,SACJlB,EAAImB,UAAY,IAAMV,EACtBT,EAAIoB,SAASZ,EAAMF,EAAGC,OAI1B,OACE,sBAAKc,UAAU,YAAf,UACE,mBAAGC,MAAO,CACRC,SAAU,WACVC,IAAK,KACLC,SAAU,UAHZ,qCAOA,mBAAGH,MAAO,CACRC,SAAU,WACVC,IAAK,MACLC,SAAU,QAHZ,0BAOA,qBAAKJ,UAAU,gBAAf,SACE,cAAC,IAAD,CAAQK,IAAK3C,EAAW4C,OAAO,MAEjC,qBAAKN,UAAU,gBAAf,SACE,wBAAQK,IAAKzC,UC/DN2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5617d337.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  useEffect(async () => {\n    const net = await cocossd.load();\n    setInterval(() => {detect(net)}, 10);\n  });\n\n  const detect = async (net) => {\n    // Check if webcam video is available\n    if (\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Configure dimensions\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n      // Start detecting objects\n      const obj = await net.detect(video);\n      // Draw bounding box\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawBbox(obj, ctx); \n    }\n  };\n\n  const drawBbox = (detections, ctx) =>{\n    detections.forEach(prediction => {\n      // Extract boxes and classes\n      const [x, y, width, height] = prediction['bbox']; \n      const text = prediction['class']; \n      // Set styling\n      const color = Math.floor(Math.random()*18000000).toString(16);\n      ctx.strokeStyle = '#' + color;\n      ctx.font = '20px Roboto';\n      // Draw annotated bbox\n      ctx.beginPath();\n      ctx.rect(x, y, width, height);\n      ctx.stroke();\n      ctx.fillStyle = '#' + color;\n      ctx.fillText(text, x, y);\n    });\n  }\n\n  return (\n    <div className=\"container\">\n      <p style={{\n        position: \"absolute\",\n        top: \"8%\",\n        fontSize: \"3.5rem\"\n      }}>\n        COCOSSD Object Detector\n      </p>\n      <p style={{\n        position: \"absolute\",\n        top: \"18%\",\n        fontSize: \"2rem\"\n      }}>\n        with Facecam\n      </p>\n      <div className=\"display-frame\">\n        <Webcam ref={webcamRef} muted={true} />\n      </div>\n      <div className=\"display-frame\">\n        <canvas ref={canvasRef} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}